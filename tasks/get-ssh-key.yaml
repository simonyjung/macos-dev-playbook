---
- name: Retrieve SSH private key from 1Password
  vars:
    # REQUIRED (set via --extra-vars or here)
    op_item_title: "kyjung ssh"        # Title of the 1Password item
    op_vault: "Private"                # Vault name (optional; set "" to omit)
    op_key_label: "private key"        # Field label inside the 1Password item that contains the private key
    dest_path: "~/.ssh/kyjung"   # Destination path to write the key
    dest_owner: "{{ lookup('env','USER') }}"
    dest_mode: "0600"
    # Optionally pass the OP session token into the env as op_session_token_name/ value
    # Example session name: OP_SESSION_myaccount
    # You can supply this by --extra-vars "op_session_name=OP_SESSION_myaccount op_session_value=...."
    op_session_name: ""   # e.g. "OP_SESSION_myaccount"  (leave blank to use whatever OP env is already present)
    op_session_value: ""  # optional: raw token value (use only if you can't export it manually)
  tasks:

    - name: Validate that op CLI is present
      command: "op --version"
      register: op_version
      failed_when: op_version.rc != 0
      changed_when: false

    - name: Fetch 1Password item JSON
      vars:
        op_cmd: >-
          op item get
          "{{ op_item_title }}"
          {% if op_vault|length > 0 %} --vault "{{ op_vault }}" {% endif %}
          --format json
      command: "{{ op_cmd }}"
      register: op_item_json
      no_log: true
      environment: >-
        {{ {} | combine((op_session_name|length > 0) | ternary({ op_session_name: op_session_value }, {})) }}
      changed_when: false

    - name: Parse private key value from op JSON
      set_fact:
        ssh_private_key: >-
          {{ (op_item_json.stdout | from_json).details.fields
             | selectattr('label','equalto', op_key_label)
             | map(attribute='value')
             | first | default('') }}
      when: op_item_json.stdout is defined
      no_log: true

    - name: Fail if private key not found
      fail:
        msg: "Could not extract private key field '{{ op_key_label }}' from 1Password item '{{ op_item_title }}'."
      when: ssh_private_key | length == 0

    - name: Ensure destination directory exists
      file:
        path: "{{ dest_path | dirname }}"
        state: directory
        mode: "0700"
        owner: "{{ dest_owner }}"

    - name: Write private key to file
      copy:
        content: "{{ ssh_private_key }}\n"
        dest: "{{ dest_path | expanduser }}"
        owner: "{{ dest_owner }}"
        mode: "{{ dest_mode }}"
        force: yes
      no_log: true

    - name: Ensure private key has strict permissions (double-check)
      file:
        path: "{{ dest_path | expanduser }}"
        mode: "{{ dest_mode }}"
        owner: "{{ dest_owner }}"

    - name: Inform user (safe message)
      debug:
        msg: "SSH private key saved to {{ dest_path | expanduser }} (permissions {{ dest_mode }})."
